#!/bin/sh
# /usr/bin/recorder-web - Simple standalone web interface

PORT=8080
PIDFILE=/var/run/recorder-web.pid

handle_request() {
    # Read the first line to get the request
    read REQUEST_LINE
    # Extract the path and query string
    PATH=$(echo "$REQUEST_LINE" | cut -d' ' -f2 | cut -d'?' -f1)
    QUERY=$(echo "$REQUEST_LINE" | cut -d'?' -f2)
    case "$PATH" in
        "/cm")
            # Parse command parameter
            CMND=$(echo "$QUERY" | sed -n 's/.*cmnd=\([^&]*\).*/\1/p' | sed 's/%20/ /g')
            case "$CMND" in
                "Power ON")
                    if pgrep -f '/usr/sbin/recorder' >/dev/null; then
                        echo "Already running"
                    else
                        /etc/init.d/autorecorder start >/dev/null 2>&1
                        sleep 2
                        if pgrep -f '/usr/sbin/recorder' >/dev/null; then
                            echo "Started successfully"
                        else
                            echo "Failed to start"
                        fi
                    fi
                    ;;
                "Power OFF")
                    if ! pgrep -f '/usr/sbin/recorder' >/dev/null; then
                        echo "Already stopped"
                    else
                        /etc/init.d/autorecorder stop >/dev/null 2>&1
                        sleep 2
                        if ! pgrep -f '/usr/sbin/recorder' >/dev/null; then
                            echo "Stopped successfully"
                        else
                            echo "Failed to stop"
                        fi
                    fi
                    ;;
                "Status")
                    if pgrep -f '/usr/sbin/recorder' >/dev/null; then
                        PID=$(pgrep -f '/usr/sbin/recorder')
                        echo "RUNNING (PID: $PID)"
                    else
                        echo "STOPPED"
                    fi
                    ;;
                *)
                    echo "Unknown command: $CMND"
                    ;;
            esac
            ;;
        *)
            echo "404 Not Found"
            ;;
    esac
}

case "$1" in
    start)
        if [ -f "$PIDFILE" ] && kill -0 $(cat "$PIDFILE") 2>/dev/null; then
            echo "Web interface already running"
            exit 1
        fi

        echo "Starting recorder web interface on port $PORT..."

        (
            while true; do
                # Use a FIFO for netcat to read from and write to
                TMPFIFO="/tmp/recorder-web.$$"
                mkfifo "$TMPFIFO"
                # nc -l -p $PORT < $TMPFIFO | { handle_request > $TMPFIFO; }
                { handle_request < "$TMPFIFO" | {
                    printf "HTTP/1.1 200 OK\r\n"
                    printf "Content-Type: text/plain\r\n"
                    printf "Access-Control-Allow-Origin: *\r\n"
                    printf "\r\n"
                    cat
                }; } > "$TMPFIFO" &
                # shellcheck disable=SC2034
                NCPID=$!
                nc -l -p "$PORT" < "$TMPFIFO" > "$TMPFIFO"
                rm -f "$TMPFIFO"
            done
        ) > /dev/null 2>&1 &

        echo $! > "$PIDFILE"
        echo "Web interface started (PID: $!)"
        ;;

    stop)
        if [ -f "$PIDFILE" ]; then
            PID=$(cat "$PIDFILE")
            if kill -0 "$PID" 2>/dev/null; then
                kill "$PID"
                rm -f "$PIDFILE"
                echo "Web interface stopped"
            else
                echo "Web interface not running"
                rm -f "$PIDFILE"
            fi
        else
            echo "Web interface not running"
        fi
        ;;

    status)
        if [ -f "$PIDFILE" ] && kill -0 $(cat "$PIDFILE") 2>/dev/null; then
            echo "Web interface running (PID: $(cat "$PIDFILE"))"
        else
            echo "Web interface not running"
        fi
        ;;

    *)
        echo "Usage: $0 {start|stop|status}"
        exit 1
        ;;
esac
