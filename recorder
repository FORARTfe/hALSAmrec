#!/bin/sh
#
# Original script by J. Bruce Fields, 2024
# This version by FORART (https://forart.it/), 2025
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

MNT=/tmp/mnt
recorder=""

trap 'true' SIGHUP

sleep infinity &
dummy=$!

trap '	kill $dummy;
	[ -n "$recorder" ] && kill $recorder;
	umount -l "$MNT";
	exit'	SIGTERM

first=0

while true; do
	if [ $first -eq 0 ]; then first=1; else
		if [ -n "$recorder" ]; then waiton=$recorder;
					else waiton=$dummy; fi
		wait $waiton
	fi
	card=$( arecord -l|grep '^card' )
	disk=/dev/mmcblk0?3
	[ -e $disk ] && [ -n "$card" ]
	ready=$?
	# PIDs can be reused, but this test is probably reliable enough
	# for our purposes:
	if [ -n "$recorder" -a ! -e /proc/$recorder ]; then
		recorder="";
		umount -l "$MNT"
	fi
	if [ $ready -ne 0 ]; then
		if [ -n "$recorder" ]; then
			# recording's still running but something's
			# been disconnected; try to clean up:
			# openwrt actually seems to unmount automatically,
			# but, just to be sure:
			umount -l "$MNT"
			kill -9 $recorder
			recorder=""
		fi
		continue
	fi
	if [ -n "$recorder" ]; then continue; fi
	# openwrt seems to delete mountpoints on unmount automatically,
	# so we need to recreate it here:
	mkdir -p "$MNT"
	mount -o big_writes $disk "$MNT" || continue
	while true; do
		name=$(date +%s)
    	logfile="/${MNT}/${name}.log"
		if [ ! -e "$logfile" ]; then break; fi
		sleep 1
	done
	{
	# Audio device probing
	device_info=$(arecord -l | grep -A 2 "List of CAPTURE Hardware Devices" | grep -A 1 "card [0-9]:" | head -n 3)
	card=$(echo "$device_info" | grep "card [0-9]:" | sed -E 's/.*card ([0-9]+):.*/\1/')
	device=$(echo "$device_info" | grep "device [0-9]:" | sed -E 's/.*device ([0-9]+):.*/\1/')
	inputhw=$(echo "$card,$device")
	arecord_output=$(arecord -D "hw:$card,$device" --dump-hw-params 2>&1)

	max_channels=$(echo "$arecord_output" | grep "CHANNELS:" | sed -n 's/.*CHANNELS: \[\?\([0-9]*\)\( \([0-9]*\)\)\?\]/\3/p')
	if [ -z "$max_channels" ]; then
	    max_channels=$(echo "$arecord_output" | grep "CHANNELS:" | sed -n 's/.*CHANNELS: \([0-9]*\)/\1/p')
	fi

	bitformat=$(echo "$arecord_output" | grep "^FORMAT:" | sed -n 's/.*FORMAT: \(.*\)/\1/p' | awk '{print $NF}')
	if [ -z "$bitformat" ]; then
	    bitformat=$(echo "$arecord_output" | grep "^FORMAT:" | sed -n 's/.*FORMAT: \([A-Z0-9_]*\)/\1/p')
	fi

	buffer_time_max=$(echo "$arecord_output" | sed -n '/BUFFER_TIME:/ s/.*[\[(]\([0-9]*\) \([0-9]*\)[])].*/\2/p')
	buffer_size_max=$(echo "$arecord_output" | sed -n '/BUFFER_SIZE:/ s/.*[\[(]\([0-9]*\) \([0-9]*\)[])].*/\2/p')

	max_rate=$(echo "$arecord_output" | sed -n '/RATE:/ s/.*[\[(]\([0-9]*\) \([0-9]*\)[])].*/\2/p')
	if [ -z "$max_rate" ]; then
	    max_rate=$(echo "$arecord_output" | grep "RATE:" | sed -n 's/.*RATE: \([0-9]*\)/\1/p')
	fi

	if [ "$max_rate" -gt 48000 ]; then
	    max_rate=48000
	fi

	filename="${name}_${max_channels}-${max_rate}-${bitformat}"

	# Use probed values in arecord
	arecord --device=hw:${inputhw} \
		--channels=${max_channels} \
		--file-type=raw \
		--format=${bitformat} \
		--rate=${max_rate} \
		--buffer-time=${buffer_time_max} \
		--buffer-size=${buffer_size_max} \
		> "${MNT}/${filename}.raw" 2> >(ts -s >&2) &

	recorder=$!
	}
done
